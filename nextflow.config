manifest {
  author = 'Satrio Wibowo <satrio.biology@yahoo.com>'
  name = 'pl-qc'
  description = 'QC Pipeline'
  mainScript = 'main.nf'
  nextflowVersion = '>=20.01.0'
  version = '0.1.0'
}

params {
  profile = false
  cache = ''
  illumina_suffixes = ['*_R{1,2}_001', '*_R{1,2}', '*_{1,2}' ]
  fastq_exts = ['.fastq.gz', '.fq.gz', '.fastq', '.fq']
  fastq_search_path = makeFastqSearchPath( illumina_suffixes, fastq_exts )
  fastq_input = 'NO_FILE'
  samplesheet_input = 'NO_FILE'
  platform= 'illumina'
  versioned_outdir = false
  outdir = 'results'
}

def makeFastqSearchPath ( illumina_suffixes, fastq_exts ) {
    def fastq_search_path = []
    for (suffix in illumina_suffixes){
        for (ext in fastq_exts) {
            fastq_search_path.add(params.fastq_input.toString() + '/' + suffix.toString() + ext.toString())
        }
    }
    return fastq_search_path
}

profiles {
  standard {
     docker {
       enabled = true
     }
  }
}

process {
  withName: fastqc{
      errorStrategy = { task.exitStatus in ((130..145) + 104) ? 'retry' : 'finish' }
      maxRetries    = 1
      cpus   = { check_max( 4 * task.attempt, 'cpus' ) }
      memory = { check_max( 4.GB * task.attempt, 'memory' ) }
      container = 'quay.io/biocontainers/fastqc:0.11.9--0'
  }
  withName: multiqc{
      container = 'quay.io/biocontainers/multiqc:1.20--pyhdfd78af_1'
  }
}

aws {
    batch {
        maxParallelTransfers = 1
    }
}

def check_max(obj, type) {
    if (type == 'memory') {
        try {
            if (obj.compareTo(params.max_memory as nextflow.util.MemoryUnit) == 1)
                return params.max_memory as nextflow.util.MemoryUnit
            else
                return obj
        } catch (all) {
            println "   ### ERROR ###   Max memory '${params.max_memory}' is not valid! Using default value: $obj"
            return obj
        }
    } else if (type == 'time') {
        try {
            if (obj.compareTo(params.max_time as nextflow.util.Duration) == 1)
                return params.max_time as nextflow.util.Duration
            else
                return obj
        } catch (all) {
            println "   ### ERROR ###   Max time '${params.max_time}' is not valid! Using default value: $obj"
            return obj
        }
    } else if (type == 'cpus') {
        try {
            return Math.min( obj, params.max_cpus as int )
        } catch (all) {
            println "   ### ERROR ###   Max cpus '${params.max_cpus}' is not valid! Using default value: $obj"
            return obj
        }
    }
}